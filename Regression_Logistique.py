# -*- coding: utf-8 -*-
"""tp5_regression_logistique.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xeC3eFdUVpKgGy1HREHx6uaWJcH5xaMM
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns

data = pd.read_csv("diabetes.csv",sep=",")

data

plt.scatter(data['BloodPressure'],data['Outcome'])
plt.show()

x= data.iloc[:,0:8].values
y = data.iloc[:,8].values

x

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=1.0/3)

len(x_train)

len(y_train)

len(x_test)

len(y_test)

from sklearn.linear_model import LogisticRegression
from sklearn import linear_model

#modele_logit = LogisticRegression(penalty='none',solver='newton-cg')
#modele_logit.fit(x_train,y_train)

modele_regLog = linear_model.LogisticRegression(random_state = 0,solver = 'liblinear', multi_class = 'auto') #instanciation du modèle

#training
modele_regLog.fit(x_train,y_train)

#précision du modèle
precision = modele_regLog.score(x_test,y_test)
print(precision*100)    #calcule de précision

y_pred= modele_regLog.predict(x_test)
y_pred

y_test    #la capaciter du model a géneralise

y_pred2= modele_regLog.predict(x_train)
y_pred2

y_train

from sklearn.metrics import accuracy_score

accuracy_score(y_test, y_pred)

import numpy as np
accuracy_score(np.array([[0, 1], [1, 1]]), np.ones((2, 2)))s